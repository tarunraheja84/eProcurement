// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//models
model Procurement {
  procurementId      String             @id @default(auto()) @map("_id") @db.ObjectId
  procurementName    String             @unique
  createdBy          String
  createdAt          DateTime           @default(now())
  updatedBy          String
  updatedAt          DateTime           @updatedAt
  requestedTo        String
  confirmedBy        String
  status             ProcurementStatus  @default(DRAFT)
  volumeDuration     VolumeDuration     @default(weekly)
  productsQuantity   Json?
  productIds         String[]           @db.ObjectId
  products           Product[]          @relation(fields: [productIds], references: [id])
  quotations         Quotation[]
  quotationsRequests QuotationRequest[]
}

model Product {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  createdBy           String
  updatedBy           String
  productId           String
  sellerProductId     String
  productName         String
  category            String
  categoryId          String
  subCategory         String
  subCategoryId       String
  imgPath             String
  sellingPrice        Float
  packSize            String
  taxes               Taxes?
  isBasePrice         Boolean
  procurementIds      String[]           @db.ObjectId
  procurements        Procurement[]      @relation(fields: [procurementIds], references: [procurementId])
  quotationIds        String[]           @db.ObjectId
  quotations          Quotation[]        @relation(fields: [quotationIds], references: [quotationId])
  quotationRequestIds String[]           @db.ObjectId
  quotationRequests   QuotationRequest[] @relation(fields: [quotationRequestIds], references: [quotationRequestId])
}

model VendorUser {
  userId      String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String         @unique
  role        VendorUserRole @default(USER)
  phoneNumber String
  vendor      Vendor         @relation(fields: [vendorId], references: [vendorId])
  vendorId    String         @db.ObjectId
  createdBy   String
  updatedBy   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  status      UserStatus     @default(INACTIVE)
}

enum VendorUserRole {
  USER
  ADMIN
  MANAGER
}

model Vendor {
  vendorId            String             @id @default(auto()) @map("_id") @db.ObjectId
  businessName        String             @unique
  businessBrandName   String?
  gstin               String?
  pan                 String             @unique
  addressLine         String
  pinCode             String
  city                String
  state               String
  countryCode         String
  phoneNumber         String             @unique
  status              VendorStatus       @default(INACTIVE)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  createdBy           String
  updatedBy           String
  vendorUsers         VendorUser[]
  quotations          Quotation[]
  orders              Order[]
  quotationRequestIds String[]           @db.ObjectId
  quotationRequests   QuotationRequest[] @relation(fields: [quotationRequestIds], references: [quotationRequestId])
  pgAccountId         String?
}

model InternalUser {
  userId      String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String     @unique
  phoneNumber String
  role        UserRole   @default(USER)
  status      UserStatus @default(ACTIVE)
  createdBy   String
  updatedBy   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Quotation {
  quotationId        String           @id @default(auto()) @map("_id") @db.ObjectId
  quotationName      String
  pricing            Pricing
  status             QuotationStatus  @default(PENDING)
  createdAt          DateTime?        @default(now())
  updatedAt          DateTime?        @updatedAt
  createdBy          String?
  updatedBy          String?
  procurement        Procurement      @relation(fields: [procurementId], references: [procurementId])
  procurementId      String           @db.ObjectId
  vendor             Vendor           @relation(fields: [vendorId], references: [vendorId])
  vendorId           String           @db.ObjectId
  expiryDate         DateTime         @default(now())
  total              Float
  amount             Float
  totalTax           Float
  quotationProducts  Json
  productIds         String[]         @db.ObjectId
  products           Product[]        @relation(fields: [productIds], references: [id])
  quotationRequest   QuotationRequest @relation(fields: [quotationRequestId], references: [quotationRequestId])
  quotationRequestId String           @db.ObjectId
  orders             Order[]
}

model QuotationRequest {
  quotationRequestId       String                 @id @default(auto()) @map("_id") @db.ObjectId
  quotationRequestName     String
  pricing                  Pricing
  status                   QuotationRequestStatus @default(ACTIVE)
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  createdBy                String
  updatedBy                String
  procurement              Procurement            @relation(fields: [procurementId], references: [procurementId])
  procurementId            String                 @db.ObjectId
  vendorIds                String[]               @db.ObjectId
  vendors                  Vendor[]               @relation(fields: [vendorIds], references: [vendorId])
  expiryDate               DateTime               @default(now())
  quotations               Quotation[]
  quotationRequestProducts Json
  productIds               String[]               @db.ObjectId
  products                 Product[]              @relation(fields: [productIds], references: [id])
}

model Order {
  orderId                String           @id @default(auto()) @map("_id") @db.ObjectId
  createdBy              String?
  createdAt              DateTime?        @default(now())
  updatedBy              String?
  updatedAt              DateTime?        @updatedAt
  status                 OrderStatus      @default(PENDING)
  totalAmount            Float
  totalTax               Float
  total                  Float
  marketPlaceOrderId     String
  marketPlaceOrderUrl    String
  vendor                 Vendor?          @relation(fields: [vendorId], references: [vendorId])
  vendorId               String           @db.ObjectId
  deliveryAddress        DeliveryAddress
  quotation              Quotation?       @relation(fields: [quotationId], references: [quotationId])
  quotationId            String           @db.ObjectId
  orderItems             OrderItem[]
  finalTotalAmount       Float
  finalTotalTax          Float
  finalTotal             Float
  cancellationDate       DateTime?
  deliveryDate           DateTime?
  isInvoicePresent       Boolean?
  paymentType            PaymentType?
  payment                Payment?         @relation(fields: [paymentId], references: [id])
  paymentId              String?          @db.ObjectId
  pgOrderId              String?
  cxoTransactionsIds     String[]         @db.ObjectId
  cxoTransactions        CxoTransaction[] @relation(fields: [cxoTransactionsIds], references: [cxoTxnId])
  buyerDetails           BuyerDetails
  sellerDetails          SellerDetails
  isVendorInvoicePresent Boolean?
}

type SellerDetails {
  sellerBusinessName    String
  sellerBusinessAddress String
  sellerPhoneNo         String
  sellerBizBrandName    String
  sellerGSTIN           String?
  sellerPAN             String
}

type BuyerDetails {
  buyerBusinessName       String
  buyerBizBrandName       String
  billingAddress          String
  billingAddrStateUTCode  String
  shippingAddrStateUTCode String
  buyerGSTIN              String?
}

enum PaymentType {
  NONE
  PREPAID
  POSTPAID
}

type OrderItem {
  id               String
  orderedQty       Float
  totalAmount      Float
  totalTax         Float
  total            Float
  receivedQty      Float
  unitPrice        Float
  taxes            Taxes?
  productId        String
  productName      String
  category         String
  categoryId       String
  subCategory      String
  subCategoryId    String
  imgPath          String
  sellingPrice     Float
  packSize         String
  acceptedQty      Float
  isSellerAccepted Boolean
  sellerProductId  String
}

model Note {
  noteId     String    @id @default(auto()) @map("_id") @db.ObjectId
  entityType NoteType
  entityId   String    @unique @db.ObjectId
  createdBy  String?
  createdAt  DateTime? @default(now())
  updatedBy  String?
  updatedAt  DateTime? @updatedAt
  message    String
}

model Settings {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  settingsName  String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   String
  updatedBy   String
  permissions Permissions?
}

//enums

enum RolePermissions {
  NONE
  VIEW
  CREATE
  EDIT
}

enum UserType {
  INTERNAL_USER
  VENDOR_USER
}

enum ProcurementStatus {
  DRAFT
  AWAITING_APPROVAL
  ACTIVE
  INACTIVE
}

enum VolumeDuration {
  weekly
  daily
}

enum OrderStatus {
  PENDING
  DELIVERED
  CONFIRMED
  CANCELLED
}

enum VendorStatus {
  ACTIVE
  INACTIVE
}

enum UserRole {
  USER
  ADMIN
  MANAGER
}

enum InternalUserRole {
  USER
  ADMIN
  MANAGER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum QuotationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
  VOID
}

enum QuotationRequestStatus {
  DRAFT
  ACTIVE
  VOID
  EXPIRED
}

enum NoteType {
  QUOTATION
  QUOTATION_REQUEST
  ORDER
  PROCUREMENT
}

enum Pricing {
  FLAVRFOOD_PRICING
  MANUAL_PRICING
}

//types
type Permissions {
  USER    EntityPermissions
  ADMIN   EntityPermissions
  MANAGER EntityPermissions
}

type EntityPermissions {
  procurementPermissions      RolePermissions
  quotationRequestPermissions RolePermissions
  quotationPermissions        RolePermissions
  orderPermissions            RolePermissions
  paymentPermissions          RolePermissions
  vendorPermissions           RolePermissions
  internalUserPermissions     RolePermissions
}

type DeliveryAddress {
  addressLine String
  city        String
  country     String
  pinCode     String
  state       String
}

type Taxes {
  igst Float?
  cgst Float?
  sgst Float?
  cess Float?
}

model Payment {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  paymentId     String
  paymentDate   DateTime?
  amount        Float
  paymentType   PaymentType
  paymentMethod PaymentMethod?
  status        PaymentStatus  @default(TRANSFERRED)
  createdBy     String?
  createdAt     DateTime?      @default(now())
  updatedBy     String?
  updatedAt     DateTime?      @updatedAt
  orders        Order[]
}

enum PaymentMethod {
  UPI
  RTGS
  IMPS
  NEFT
}

enum PaymentStatus {
  TRANSFERRED
  FAILED
  CAPTURED
}

model CxoTransaction {
  cxoTxnId      String               @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  status        CxoTransactionStatus @default(PENDING)
  paymentId     String?
  currency      String
  paymentMethod PaymentMethod?
  orderIds      String[]             @db.ObjectId
  orders        Order[]              @relation(fields: [orderIds], references: [orderId])
  pgOrderId     String?
  createdAt     DateTime
  createdBy     String?
  updatedBy     String?
}

enum CxoTransactionStatus {
  PAID
  PENDING
}
