// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Procurement {
  procurementId       String               @id @default(auto()) @map("_id") @db.ObjectId
  procurementName     String               @unique
  createdBy           String
  createdAt           DateTime             @default(now())
  updatedBy           String
  updatedAt           DateTime             @updatedAt
  requestedTo         String
  confirmedBy         String
  status              ProcurementStatus    @default(DRAFT)
  volumeDuration      volumeDuration       @default(weekly)
  procurementProducts ProcurementProduct[]
  quotations          Quotation[]
  quotationsRequests  QuotationRequest[]
}

model VendorUser {
  userId    String         @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String         @unique
  role      VendorUserRole @default(USER)
  phoneInt  String?
  vendor    Vendor         @relation(fields: [vendorId], references: [vendorId])
  vendorId  String         @db.ObjectId
  createdBy String
  updatedBy String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

enum VendorUserRole {
  USER
  ADMIN
  MANAGER
}

model Vendor {
  vendorId            String             @id @default(auto()) @map("_id") @db.ObjectId
  businessName        String             @unique
  businessBrandName   String?
  gstin               String?
  pan                 String             @unique
  addressLine         String
  pinCode             String
  city                String
  state               String
  countryCode         String
  phoneNumber         String             @unique
  status              VendorStatus       @default(INACTIVE)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  createdBy           String
  updatedBy           String
  vendorUsers         VendorUser[]
  quotations          Quotation[]
  orders              Order[]
  quotationRequestIds String[]           @db.ObjectId
  quotationRequests   QuotationRequest[] @relation(fields: [quotationRequestIds], references: [quotationRequestId])
}

enum VendorStatus {
  ACTIVE
  INACTIVE
}

enum UserRole {
  USER
  ADMIN
  MANAGER
}

model Quotation {
  quotationId       String             @id @default(auto()) @map("_id") @db.ObjectId
  quotationName     String
  status            QuotationStatus    @default(PENDING)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdBy         String
  updatedBy         String
  procurement       Procurement        @relation(fields: [procurementId], references: [procurementId])
  procurementId     String             @db.ObjectId
  vendor            Vendor             @relation(fields: [vendorId], references: [vendorId])
  vendorId          String             @db.ObjectId
  expiryDate        DateTime           @default(now())
  total             Int
  amount            Int
  totalTax          Int
  quotationProducts QuotationProduct[]
  orders            Order[]
}

model QuotationProduct {
  quotationProductId String    @id @default(auto()) @map("_id") @db.ObjectId
  supplierPrice      Int
  requestedQty       Int
  acceptedQty        Int
  quotationId        String    @db.ObjectId
  productId          String    @db.ObjectId
  quotation          Quotation @relation(fields: [quotationId], references: [quotationId])
  product            Product   @relation(fields: [productId], references: [id])

  @@unique([productId])
  @@index([quotationId, productId])
  @@index([quotationId])
}

model ProcurementProduct {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  procurementId       String             @db.ObjectId
  productId           String             @db.ObjectId
  quantity            Int
  procurement         Procurement        @relation(fields: [procurementId], references: [procurementId])
  product             Product            @relation(fields: [productId], references: [id])
  quotationRequestIds String[]           @db.ObjectId
  quotationRequests   QuotationRequest[] @relation(fields: [quotationRequestIds], references: [quotationRequestId])

  @@unique([procurementId, productId]) // Ensure unique combination
  @@index([procurementId]) // Index for quick lookup
  @@index([productId]) // Index for quick lookup
}

model Product {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  productId           String
  productName         String
  category            String
  categoryId          String
  subCategory         String
  subCategoryId       String
  imgPath             String
  sellingPrice        Int
  packSize            String
  taxes               Taxes?
  procurementProducts ProcurementProduct[]
  quotationProducts   QuotationProduct[]
  orderItems          OrderItem[]
}

model QuotationRequest {
  quotationRequestId          String                 @id @default(auto()) @map("_id") @db.ObjectId
  quotationRequestName        String
  status                      QuotationRequestStatus @default(ACTIVE)
  createdAt                   DateTime               @default(now())
  updatedAt                   DateTime               @updatedAt
  createdBy                   String
  updatedBy                   String
  procurement                 Procurement            @relation(fields: [procurementId], references: [procurementId])
  procurementId               String                 @db.ObjectId
  quotationRequestProducts    ProcurementProduct[]   @relation(fields: [quotationRequestProductsIds], references: [id])
  quotationRequestProductsIds String[]               @db.ObjectId
  vendorIds                   String[]               @db.ObjectId
  vendors                     Vendor[]               @relation(fields: [vendorIds], references: [vendorId])
  expiryDate                  DateTime               @default(now())
}

model InternalUser {
  userId    String           @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String           @unique
  role      InternalUserRole @default(USER)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum InternalUserRole {
  USER
  ADMIN
  MANAGER
}

enum QuotationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum QuotationRequestStatus {
  DRAFT
  ACTIVE
  VOID
  EXPIRED
}

enum ProcurementStatus {
  DRAFT
  ACTIVE
  INACTIVE
}

enum volumeDuration {
  weekly
  daily
}

enum OrderStatus {
  PENDING
  DELIVERED
  ACCEPTED
  CANCELLED
}

model Order {
  orderId             String      @id @default(auto()) @map("_id") @db.ObjectId
  createdBy           String
  createdAt           DateTime    @default(now())
  updatedBy           String
  updatedAt           DateTime    @updatedAt
  status              OrderStatus @default(PENDING)
  totalAmount         Int
  totalTax            Int
  total               Int
  marketPlaceOrderId  String
  marketPlaceOrderUrl String
  vendor              Vendor      @relation(fields: [vendorId], references: [vendorId])
  vendorId            String      @db.ObjectId
  deliveryAddress     String
  quotation           Quotation   @relation(fields: [quotationId], references: [quotationId])
  quotationId         String      @db.ObjectId
  orderItems          OrderItem[]
}

type OrderItem {
  productId   String @db.ObjectId
  orderedQty  Int
  totalAmount Int
  totalTax    Int
  total       Int
  receivedQty Int
  unitPrice   Int
  taxes       Taxes?
}

type Taxes {
  igst Int?
  cgst Int?
  sgst Int?
  cess Int?
}
