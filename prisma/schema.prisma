// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//models
model Procurement {
  procurementId      String             @id @default(auto()) @map("_id") @db.ObjectId
  procurementName    String             @unique
  createdBy          String
  createdAt          DateTime           @default(now())
  updatedBy          String
  updatedAt          DateTime           @updatedAt
  requestedTo        String
  confirmedBy        String
  status             ProcurementStatus  @default(DRAFT)
  volumeDuration     VolumeDuration     @default(weekly)
  productsQuantity   Json?
  productIds         String[]           @db.ObjectId
  products           Product[]          @relation(fields: [productIds], references: [id])
  quotations         Quotation[]
  quotationsRequests QuotationRequest[]
}

model Product {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  productId      String
  productName    String
  category       String
  categoryId     String
  subCategory    String
  subCategoryId  String
  imgPath        String
  sellingPrice   Int
  packSize       String
  taxes          Taxes?
  procurementIds String[]      @db.ObjectId
  procurements   Procurement[] @relation(fields: [procurementIds], references: [procurementId])
}

model Vendor {
  vendorId            String             @id @default(auto()) @map("_id") @db.ObjectId
  businessName        String             @unique
  businessBrandName   String?
  gstin               String?
  pan                 String             @unique
  addressLine         String
  pinCode             String
  city                String
  state               String
  countryCode         String
  phoneNumber         String             @unique
  status              VendorStatus       @default(INACTIVE)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  createdBy           String
  updatedBy           String
  vendorUsers         VendorUser[]
  quotations          Quotation[]
  orders              Order[]
  quotationRequestIds String[]           @db.ObjectId
  quotationRequests   QuotationRequest[] @relation(fields: [quotationRequestIds], references: [quotationRequestId])
}

model VendorUser {
  userId      String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  role        UserRole @default(USER)
  phoneNumber String
  status      UserStatus @default(ACTIVE)
  vendor      Vendor   @relation(fields: [vendorId], references: [vendorId])
  vendorId    String   @db.ObjectId
  createdBy   String
  updatedBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model InternalUser {
  userId      String             @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String             @unique
  phoneNumber String
  role        UserRole           @default(USER)
  status      UserStatus @default(ACTIVE)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Quotation {
  quotationId   String          @id @default(auto()) @map("_id") @db.ObjectId
  quotationName String
  status        QuotationStatus @default(PENDING)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  createdBy     String
  updatedBy     String
  procurement   Procurement     @relation(fields: [procurementId], references: [procurementId])
  procurementId String          @db.ObjectId
  vendor        Vendor          @relation(fields: [vendorId], references: [vendorId])
  vendorId      String          @db.ObjectId
  expiryDate    DateTime        @default(now())
  Order         Order[]
}

model QuotationRequest {
  quotationRequestId   String                 @id @default(auto()) @map("_id") @db.ObjectId
  quotationRequestName String
  status               QuotationRequestStatus @default(ACTIVE)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  createdBy            String
  updatedBy            String
  procurement          Procurement            @relation(fields: [procurementId], references: [procurementId])
  procurementId        String                 @db.ObjectId
  vendorIds            String[]               @db.ObjectId
  vendors              Vendor[]               @relation(fields: [vendorIds], references: [vendorId])
  expiryDate           DateTime               @default(now())
}

model Order {
  orderId             String      @id @default(auto()) @map("_id") @db.ObjectId
  createdBy           String
  createdAt           DateTime    @default(now())
  updatedBy           String
  updatedAt           DateTime    @updatedAt
  status              OrderStatus @default(PENDING)
  totalAmount         Int
  totalTax            Int
  total               Int
  marketPlaceOrderId  String
  marketPlaceOrderUrl String
  vendor              Vendor      @relation(fields: [vendorId], references: [vendorId])
  vendorId            String      @db.ObjectId
  deliveryAddress     String
  quotation           Quotation   @relation(fields: [quotationId], references: [quotationId])
  quotationId         String      @db.ObjectId
  orderItems          OrderItem[]
}

type OrderItem {
  productId     String @db.ObjectId
  productName   String
  category      String
  categoryId    String
  subCategory   String
  subCategoryId String
  imgPath       String
  packSize      String
  orderedQty    Int
  totalAmount   Int
  totalTax      Int
  total         Int
  receivedQty   Int
  unitPrice     Int
  taxes         Taxes?
}

//enums
enum ProcurementStatus {
  DRAFT
  AWAITING_APPROVAL
  ACTIVE
  INACTIVE
}

enum VolumeDuration {
  weekly
  daily
}

enum OrderStatus {
  PENDING
  DELIVERED
  ACCEPTED
  CANCELLED
}

enum VendorStatus {
  ACTIVE
  INACTIVE
}

enum VendorUserRole {
  USER
  ADMIN
  MANAGER
}

enum UserRole {
  USER
  ADMIN
  MANAGER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum QuotationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum QuotationRequestStatus {
  DRAFT
  ACTIVE
  VOID
  EXPIRED
}

//types
type Taxes {
  igst Int?
  cgst Int?
  sgst Int?
  cess Int?
}
